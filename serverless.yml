service: promatch

provider:
  name: aws
  runtime: go1.x
  region: us-east-2
  stage: ${opt:stage, 'dev'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource: "arn:aws:s3:::${self:custom.imageUploadBucket}/*"

plugins:
  - serverless-go-build
  - serverless-offline
  - serverless-dotenv-plugin
useDotenv: true

custom:
  promatchEnvironment:
    DBPASS: ${env:DBPASS}
    DBUSER: ${env:DBUSER}
    BUCKET_NAME: ${env:BUCKET_NAME}
  go-build:
    awsbuildPrefix: "GOOS=linux GOARCH=amd64 CGO_ENABLED=0 "
    binPath: "build"
  imageUploadBucket: ${env:BUCKET_NAME}

functions:
  view-user:
    handler: cmd/user/promatch-view-user/main.go
    events:
      - http:
          path: /users
          method: get
          cors: true
    environment: ${self:custom.promatchEnvironment}

  create-user:
    handler: cmd/user/promatch-create-user/main.go
    events:
      - http:
          path: /users
          method: post
          cors: true
    environment: ${self:custom.promatchEnvironment}

  update-user:
    handler: cmd/user/promatch-update-user/main.go
    events:
      - http:
          path: /users
          method: put
          cors: true
    environment: ${self:custom.promatchEnvironment}

  delete-user:
    handler: cmd/user/promatch-delete-user/main.go
    events:
      - http:
          path: /users
          method: delete
          cors: true
    environment: ${self:custom.promatchEnvironment}

  create-auth-token:
    handler: cmd/auth/promatch-create-auth-token/main.go
    events:
      - http:
          path: /auth
          method: post
          cors: true
    environment: ${self:custom.promatchEnvironment}

  delete-auth-token:
    handler: cmd/auth/promatch-delete-auth-token/main.go
    events:
      - http:
          path: /auth
          method: delete
          cors: true
    environment: ${self:custom.promatchEnvironment}

  login-user:
    handler: cmd/login/promatch-login-user/main.go
    events:
      - http:
          path: /login
          method: post
          cors: true
    environment: ${self:custom.promatchEnvironment}

  view-user-profile:
    handler: cmd/user/promatch-view-user-profile/main.go
    events:
      - http:
          path: /users/profile
          method: get
          cors: true
    environment: ${self:custom.promatchEnvironment}

  create-post:
    handler: cmd/post/promatch-create-post/main.go
    events:
      - http:
          path: /post
          method: post
          cors: true
    environment: ${self:custom.promatchEnvironment}

  view-posts:
    handler: cmd/post/promatch-view-posts/main.go
    events:
      - http:
          path: /post
          method: get
          cors: true
    environment: ${self:custom.promatchEnvironment}

  uploadImage:
    handler: cmd/uploadImage/main.go
    events:
      - http:
          path: /uploadImage
          method: post
          cors: true
    memorySize: 128

resources:
  Resources:
    ImageUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.imageUploadBucket}

    ImageUploadBucketBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ImageUploadBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "s3:GetObject"
              Resource:
                - !Join ["/", [!GetAtt [ImageUploadBucket, Arn], "*"]]
              Principal: "*"
